컴파일 --> TestJava.class

C:> javac TestJava

실행

C:> java TestJava

jvm 이 프로그램을 실행할 때는 TestJava.class를 가지고 실행한다.

---------------------------------------

1). 아래와 같은 명령행으로 프로그램을 실행하였을 때 결과는 무엇인가? 

C:> javac TestJava 123

public class TestJava
public static void main(String args[])
System.out.println(args[1]);
  
  답: 인덱스 예외가 발생한다.
  설명: 매개변수에 배열이 있는데 그냥 실행하면 배열에 null을 대입하고 실행시킨다.
123을 args 배열의 0번째 인덱스에 넣어주는 코드인데 1번째 인덱스를 출력하라고 하면 1번째 방은 비어있는 방으로
인덱스 예외가 발생한다. (ArrayIndexOutOfException)

-----------------------
  우리가 코드 작업하는 것은 자바 파일이고 실제로 실행하는 것은 클래스 파일이다.
  수정이 이루어졌을 땐 무조건 컴파일 후 실행해야한다.
  C언어는 자바처럼 인터프리터 방식이 아니라 컴파일하고 전체가 실행된다. 
  그래서 어디서 에러가 났는지 모르기 때문에 디버깅을 해야한다. (역순으로 되짚어가면서 에러를 찾는 방식)
  자바 같은 인터프리터 언어는 라인별로 실행을 하니까 디버깅 할 필요가 없다.
---------------------

2). 다음 프로그램의 컴파일 결과를 예상하라.

class Test
	static int a = 1;
	public static void main(String[] args)
		int a;
		System.out.println(a);

	답:  a 값이 초기화가 되어있지 않아서 에러가 발생한다.
	설명: 블럭이 같다면 statix으로 선언한 변수와 지역변수는 이름이 같아도 된다. 
하지만 같은 영역 안에 변수가 선언됐을 땐 이름이 구별되어야 한다. 
변수 이름이 같은 경우엔 지역변수를 먼저 쓴다. 그런데 지역변수는 사용되기 전에 반드시 값이 대입되어야 한다.
즉, 선언 후 초기화가 이루어져야 한다는 뜻이다.














